{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.obsidian/app.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1749879089646},{"_id":"source/.obsidian/appearance.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1749879089650},{"_id":"source/.obsidian/core-plugins.json","hash":"2a08642e2455d9db3afbaebcfb27b2884a1fb59e","modified":1749879089156},{"_id":"source/.obsidian/workspace.json","hash":"3e5fbc4517eff83f3bd41f39bdcca2fb233d1336","modified":1749879091698},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1749815261237},{"_id":"source/CS61B/proj0.md","hash":"595e1e56399f576a76b11e1bb11a74b8f76c372c","modified":1749879106538},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"6497b70356271fd6f9f1dc862353be844c457a53","modified":1749878269925},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1749878269226},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"06889bee30e4c39479467021da434d3a6a0990fc","modified":1749878269919},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"a93d7b3990e45bc7247eecf01888f71674887a63","modified":1749878270054},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1749878270067},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1749878270073},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1749878270058},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1749878270069},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1749878270078},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1749878270083},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1749878270095},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1749878270062},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1749878270087},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1749878270091},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1749878270101},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1749878270097},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1749878270113},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1749878270110},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1749878270106},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1749878270116},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1749878270119},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1749878270120},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1749878270123},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1749878270127},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1749878270125},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1749878270128},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1749878270130},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1749878270132},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1749878270135},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1749878270137},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1749878270141},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1749878270139},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1749878270144},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1749878270146},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1749878269619},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1749878270151},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1749878270147},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1749878269701},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"57281fc3812c877ec2d8e89ec87ede57b9789d4c","modified":1749878269772},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1749878269794},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1749878269778},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1749878269800},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1749878269827},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1749878269492},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1749878269878},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"1b89d0caba03a66a43d9c290a5e94fa438a89210","modified":1749878269441},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1749878269724},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"e9d4678e14be5e3cd5e34d783e5af6d6626092f5","modified":1749878269643},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"0039146b8ccbdf9b9f8bee58fc6c238f0e9921fc","modified":1749878269524},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1749878269745},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1749878269750},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1749878269578},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"0e94f5722d4c44d3cc91be2f4fd30b9ab503b868","modified":1749878269758},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1749878269766},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1749878269784},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1749878269809},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1749878269683},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1749878269806},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1749878269945},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1749878269832},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1749878269820},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1749878269950},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1749878270050},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1749878269339},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1749878269913},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1749878269666},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1749878269713},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1749878269735},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1749878269788},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1749878269815},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1749878269838},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"f608400a08cf137ab15ec1f44bac551950afe879","modified":1749878269968},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1749878269972},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1749878269960},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1749878269977},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1749878270014},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1749878270031},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1749878269996},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1749878270039},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1749878270003},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1749878270044},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1749878269988},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1749878270008},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1749878269907},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1749878269895},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1749878269873},{"_id":"public/CS61B/proj0.html","hash":"5c95e31526c8de1f31b3bd841737e9501816a2ae","modified":1749879379093},{"_id":"public/2025/06/14/hello-world/index.html","hash":"d07d61670c1b201e54b8ab378521d73241298017","modified":1749879379093},{"_id":"public/archives/index.html","hash":"5b62b2ad36e80e823dbb1117c7c46f4ae0dcf23b","modified":1749879379093},{"_id":"public/archives/2025/06/index.html","hash":"49a791a83094cb4e459cb63c9fbab3f14d4b015e","modified":1749879379093},{"_id":"public/archives/2025/index.html","hash":"4a36eec03285c010ab36a21196fda31997cf62cb","modified":1749879379093},{"_id":"public/index.html","hash":"f8442d1a02e055342d0061f157838f7b0b641566","modified":1749879379093},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1749879379093},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1749879379093},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1749879379093},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1749879379093},{"_id":"public/css/style.css","hash":"ecc329be740a220cc188ff49b02da4847cb7ee5e","modified":1749879379093},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1749879379093}],"Category":[],"Data":[],"Page":[{"_content":"这次的`proj` 整体挺简单的，让我惊讶的是相比CS61A，它会提示要用到的辅助方法，不需要像之前非得看完整个框架才能开始做，而且还有风格检查和`git` ,`GitHub` 相关，刚好弥补了我不知道该怎么练习的苦恼。 \n\n---\n\n这次的项目是一个叫[2048](https://play2048.co/) 的游戏。\n\n## Task 1: Empty Space Exists\n\n如果棋盘上有空格就返回true，否则放回false 。\n遍历就解决了：\n\n```java\npublic boolean emptySpaceExists() {  \n    for (int x = 0; x < board.size(); x++) {  \n        for (int y = 0; y < board.size(); y++) {  \n            if (board.tile(x, y) == null) { //空方块则返回null  \n                return true;  \n            }  \n        }  \n    }  \n    return false;  \n}\n```\n\n## Task 2: Max Tile Exists\n\n如果棋盘上的任何瓦片值为获胜值（MAX_PIECE = 2048），此方法应返回 true。\n同样是遍历，但是要注意获取瓦片值前要确保瓦片存在：\n\n```java\npublic boolean maxTileExists() {  \n    for (int x = 0; x < board.size(); x++) {  \n        for (int y = 0; y < board.size(); y++) {  \n            if ((board.tile(x, y) != null) && (board.tile(x, y).value() == MAX_PIECE)) {  \n                return true;  \n            }  \n        }  \n    }  \n    return false;  \n}\n```\n\n## Task 3: At Least One Move Exists\n\n如果存在任何有效的移动，这个方法应该返回 true。\n存在有效移动的两种方式：\n1. 棋盘上至少有一个空格。\n2. 棋盘上有两个相邻（它们之间可以有空格）且值相同的方块。\n第一种很好判断，直接丢给刚刚完成的`emptySpaceExists()` 就行，第二个条件我写的很丑...QAQ\n也是基于遍历，分成横向遍历和纵向遍历，它们接下来的步骤差不多：创建一个‘先行者’(`x1`,`y1`),\n比较基础瓦片和先行者的值。\n感觉这题有点像力扣的一道棋盘题，不过那个是判断达到最终结果的最少步数，用的多叉树解决的。\n\n```java\npublic boolean atLeastOneMoveExists() {  \n    if (emptySpaceExists()) {  \n        return true;  \n    }  \n    for (int x = 0; x < board.size(); x++) {  \n        for (int y = 0; y < board.size() - 1; y++) {  \n            for (int x1 = x + 1; x1 < board.size(); x1++) {  \n                if (board.tile(x, y) != null && board.tile(x1, y) != null) {  \n                    if (board.tile(x, y).value() == board.tile(x1, y).value()) {  \n                        return true;  \n                    } else {  \n                        break;  \n                    }  \n                }  \n            }  \n            for (int y1 = y + 1; y1 < board.size(); y1++) {  \n                if (board.tile(x, y) != null && board.tile(x, y1) != null) {  \n                    if (board.tile(x, y).value() == board.tile(x, y1).value()) {  \n                        return true;  \n                    } else {  \n                        break;  \n                    }  \n                }  \n  \n            }  \n        }  \n    }  \n    return false;  \n}\n```\n\n## ## Task 5: Move Tile Up (No Merging)\n\n将位置 `(x, y)` 的方块尽可能向上移动到其所在列的最上方。\n这里提示要用 `Board` 类的方法 `move(int x, int y, Tile tile)`，这个方法将给定的 `tile` 移动到棋盘上的 `(x, y)` 位置。而且要求`moveTileUpAsFarAsPossible` 解决方案应该恰好调用一次 `move` 方法。那就是先确定步数再用`move` 。\n这里有一个小坑，如果你查看`Board` 类方法 `move` ，会发现：\n```java\nif (tile1 == null) {  \n\t...\n} else {  \n    if (tile.value() != tile1.value()) {  \n    ...  \n    }  \n    next = Tile.create(2 * tile.value(), px, py);  \n    tile1.setNext(next);  \n}\n```\n也就是如果传入`move` 的瓦片如果值存在，就一定会更新值，无论它是否移动过。于是就要注意不能把顶层瓦片传入`move` :\n```java\npublic void moveTileUpAsFarAsPossible(int x, int y) {  \n    Tile currTile = board.tile(x, y);  \n    int myValue = currTile.value();  \n    int targetY = y;  \n    int step = 0;  \n    for (int i = targetY + 1; i < board.size(); i++) { //i = targetY + 1 从下一个方块开始比较  \n        if (board.tile(x, i) == null) {  \n            step += 1;  \n        } else {  \n            if (board.tile(x, i).value() == myValue && i != y) { //i != y 防止方块在顶层时加上自己的值  \n                if (!board.tile(x, i).wasMerged()) {  \n                    step += 1;  \n                }  \n            }  \n            break;  \n        }  \n    }  \n    if (step != 0) {  \n        board.move(x, targetY + step, currTile); // 顶层方块不移动但会检测合并，防止重复加上自己的值  \n    }  \n}\n```\n\n## Task 6: Merging Tiles\n\n瓦片可以通过空格向上移动。当瓦片遇到非空格时，如果那个格子里有另一个相同值的瓦片，并且那个瓦片还没有因为这个倾斜操作被合并过，那么这两个瓦片应该合并。\n我发现我在上面的题里已经解决这个问题了，于是跳过。\n\n## Task 7: Tilt Column\n\n这个方法应该将给定坐标的列向上倾斜，将列中的所有方块移动到正确的位置，并合并需要合并的方块。\n其实就是对`moveTileUpAsFarAsPossible`方法的抽象包装，把`moveTileUpAsFarAsPossible`方法用到给定`x`坐标的一列，注意要自上而下的调用：\n\n```java\npublic void tiltColumn(int x) {  \n    for (int y = board.size() - 1; y >= 0; y--) {  \n        if (board.tile(x, y) != null) {  \n            moveTileUpAsFarAsPossible(x, y);  \n        }  \n    }  \n}\n```\n\n## Task 8: Tilt Up\n\n这个方法应该将整个棋盘向上倾斜，将所有列中的所有方块移动到它们应有的位置，并合并需要合并的方块。\n其实就是对`tiltColumn`方法的抽象包装，在棋盘的每一列调用`tiltColumn`方法：\n```java\npublic void tilt(Side side) {  \n    for (int x = 0; x < board.size(); x++) {  \n        tiltColumn(x);  \n    }  \n}\n```\n\n## Task 9: Tilt in Four Directions\n\n既然我们已经实现了向上方向的倾斜功能，现在我们必须对其他三个方向做同样的事情。\n这里我的方法应该和官方期望的解法不同，我看官方的提示好像还要用到`dubug`，这里我看它给出\n1. “ `Side` 类是一种特殊的类，称为 `Enum` ”\n2. “枚举可以用类似 `Side s = Side.NORTH` 的语法赋值。请注意，我们不是使用 `new` 关键字，而是直接将 `Side` 值设置为四个值中的一个”\n3. “如果你对 Java 枚举感兴趣，请查看 https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html 。”\n这几个提示，结合起来就是：\n```java\npublic void tiltWrapper(Side side) {  \n    board.resetMerged();  \n    switch (side) {  \n        case NORTH:  \n            board.setViewingPerspective(Side.NORTH);  \n            tilt(side);  \n            break;  \n        case WEST:  \n            board.setViewingPerspective(Side.WEST);  \n            tilt(side);  \n            board.setViewingPerspective(Side.NORTH);  \n            break;  \n        case SOUTH:  \n            board.setViewingPerspective(Side.SOUTH);  \n            tilt(side);  \n            board.setViewingPerspective(Side.NORTH);  \n            break;  \n        case EAST:  \n            board.setViewingPerspective(Side.EAST);  \n            tilt(side);  \n            board.setViewingPerspective(Side.NORTH);  \n            break;  \n        default:  \n            break;  \n    }  \n}\n```\n\n## Task 10: Updating Score\n\n实现的分数更新。\n这个直接在`moveTileUpAsFarAsPossible`方法里插入一行就行了：\n\n```java\npublic void moveTileUpAsFarAsPossible(int x, int y) {  \n    Tile currTile = board.tile(x, y);  \n    int myValue = currTile.value();  \n    int targetY = y;  \n    int step = 0;  \n    for (int i = targetY + 1; i < board.size(); i++) { \n        if (board.tile(x, i) == null) {  \n            step += 1;  \n        } else {  \n            if (board.tile(x, i).value() == myValue && i != y) { \n                if (!board.tile(x, i).wasMerged()) {  \n                    this.score += board.tile(x, y).value() * 2;  // 插入这里\n                    step += 1; \n                }  \n            }  \n            break;  \n        }  \n    }  \n    if (step != 0) {  \n        board.move(x, targetY + step, currTile); \n}\n```","source":"CS61B/proj0.md","raw":"这次的`proj` 整体挺简单的，让我惊讶的是相比CS61A，它会提示要用到的辅助方法，不需要像之前非得看完整个框架才能开始做，而且还有风格检查和`git` ,`GitHub` 相关，刚好弥补了我不知道该怎么练习的苦恼。 \n\n---\n\n这次的项目是一个叫[2048](https://play2048.co/) 的游戏。\n\n## Task 1: Empty Space Exists\n\n如果棋盘上有空格就返回true，否则放回false 。\n遍历就解决了：\n\n```java\npublic boolean emptySpaceExists() {  \n    for (int x = 0; x < board.size(); x++) {  \n        for (int y = 0; y < board.size(); y++) {  \n            if (board.tile(x, y) == null) { //空方块则返回null  \n                return true;  \n            }  \n        }  \n    }  \n    return false;  \n}\n```\n\n## Task 2: Max Tile Exists\n\n如果棋盘上的任何瓦片值为获胜值（MAX_PIECE = 2048），此方法应返回 true。\n同样是遍历，但是要注意获取瓦片值前要确保瓦片存在：\n\n```java\npublic boolean maxTileExists() {  \n    for (int x = 0; x < board.size(); x++) {  \n        for (int y = 0; y < board.size(); y++) {  \n            if ((board.tile(x, y) != null) && (board.tile(x, y).value() == MAX_PIECE)) {  \n                return true;  \n            }  \n        }  \n    }  \n    return false;  \n}\n```\n\n## Task 3: At Least One Move Exists\n\n如果存在任何有效的移动，这个方法应该返回 true。\n存在有效移动的两种方式：\n1. 棋盘上至少有一个空格。\n2. 棋盘上有两个相邻（它们之间可以有空格）且值相同的方块。\n第一种很好判断，直接丢给刚刚完成的`emptySpaceExists()` 就行，第二个条件我写的很丑...QAQ\n也是基于遍历，分成横向遍历和纵向遍历，它们接下来的步骤差不多：创建一个‘先行者’(`x1`,`y1`),\n比较基础瓦片和先行者的值。\n感觉这题有点像力扣的一道棋盘题，不过那个是判断达到最终结果的最少步数，用的多叉树解决的。\n\n```java\npublic boolean atLeastOneMoveExists() {  \n    if (emptySpaceExists()) {  \n        return true;  \n    }  \n    for (int x = 0; x < board.size(); x++) {  \n        for (int y = 0; y < board.size() - 1; y++) {  \n            for (int x1 = x + 1; x1 < board.size(); x1++) {  \n                if (board.tile(x, y) != null && board.tile(x1, y) != null) {  \n                    if (board.tile(x, y).value() == board.tile(x1, y).value()) {  \n                        return true;  \n                    } else {  \n                        break;  \n                    }  \n                }  \n            }  \n            for (int y1 = y + 1; y1 < board.size(); y1++) {  \n                if (board.tile(x, y) != null && board.tile(x, y1) != null) {  \n                    if (board.tile(x, y).value() == board.tile(x, y1).value()) {  \n                        return true;  \n                    } else {  \n                        break;  \n                    }  \n                }  \n  \n            }  \n        }  \n    }  \n    return false;  \n}\n```\n\n## ## Task 5: Move Tile Up (No Merging)\n\n将位置 `(x, y)` 的方块尽可能向上移动到其所在列的最上方。\n这里提示要用 `Board` 类的方法 `move(int x, int y, Tile tile)`，这个方法将给定的 `tile` 移动到棋盘上的 `(x, y)` 位置。而且要求`moveTileUpAsFarAsPossible` 解决方案应该恰好调用一次 `move` 方法。那就是先确定步数再用`move` 。\n这里有一个小坑，如果你查看`Board` 类方法 `move` ，会发现：\n```java\nif (tile1 == null) {  \n\t...\n} else {  \n    if (tile.value() != tile1.value()) {  \n    ...  \n    }  \n    next = Tile.create(2 * tile.value(), px, py);  \n    tile1.setNext(next);  \n}\n```\n也就是如果传入`move` 的瓦片如果值存在，就一定会更新值，无论它是否移动过。于是就要注意不能把顶层瓦片传入`move` :\n```java\npublic void moveTileUpAsFarAsPossible(int x, int y) {  \n    Tile currTile = board.tile(x, y);  \n    int myValue = currTile.value();  \n    int targetY = y;  \n    int step = 0;  \n    for (int i = targetY + 1; i < board.size(); i++) { //i = targetY + 1 从下一个方块开始比较  \n        if (board.tile(x, i) == null) {  \n            step += 1;  \n        } else {  \n            if (board.tile(x, i).value() == myValue && i != y) { //i != y 防止方块在顶层时加上自己的值  \n                if (!board.tile(x, i).wasMerged()) {  \n                    step += 1;  \n                }  \n            }  \n            break;  \n        }  \n    }  \n    if (step != 0) {  \n        board.move(x, targetY + step, currTile); // 顶层方块不移动但会检测合并，防止重复加上自己的值  \n    }  \n}\n```\n\n## Task 6: Merging Tiles\n\n瓦片可以通过空格向上移动。当瓦片遇到非空格时，如果那个格子里有另一个相同值的瓦片，并且那个瓦片还没有因为这个倾斜操作被合并过，那么这两个瓦片应该合并。\n我发现我在上面的题里已经解决这个问题了，于是跳过。\n\n## Task 7: Tilt Column\n\n这个方法应该将给定坐标的列向上倾斜，将列中的所有方块移动到正确的位置，并合并需要合并的方块。\n其实就是对`moveTileUpAsFarAsPossible`方法的抽象包装，把`moveTileUpAsFarAsPossible`方法用到给定`x`坐标的一列，注意要自上而下的调用：\n\n```java\npublic void tiltColumn(int x) {  \n    for (int y = board.size() - 1; y >= 0; y--) {  \n        if (board.tile(x, y) != null) {  \n            moveTileUpAsFarAsPossible(x, y);  \n        }  \n    }  \n}\n```\n\n## Task 8: Tilt Up\n\n这个方法应该将整个棋盘向上倾斜，将所有列中的所有方块移动到它们应有的位置，并合并需要合并的方块。\n其实就是对`tiltColumn`方法的抽象包装，在棋盘的每一列调用`tiltColumn`方法：\n```java\npublic void tilt(Side side) {  \n    for (int x = 0; x < board.size(); x++) {  \n        tiltColumn(x);  \n    }  \n}\n```\n\n## Task 9: Tilt in Four Directions\n\n既然我们已经实现了向上方向的倾斜功能，现在我们必须对其他三个方向做同样的事情。\n这里我的方法应该和官方期望的解法不同，我看官方的提示好像还要用到`dubug`，这里我看它给出\n1. “ `Side` 类是一种特殊的类，称为 `Enum` ”\n2. “枚举可以用类似 `Side s = Side.NORTH` 的语法赋值。请注意，我们不是使用 `new` 关键字，而是直接将 `Side` 值设置为四个值中的一个”\n3. “如果你对 Java 枚举感兴趣，请查看 https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html 。”\n这几个提示，结合起来就是：\n```java\npublic void tiltWrapper(Side side) {  \n    board.resetMerged();  \n    switch (side) {  \n        case NORTH:  \n            board.setViewingPerspective(Side.NORTH);  \n            tilt(side);  \n            break;  \n        case WEST:  \n            board.setViewingPerspective(Side.WEST);  \n            tilt(side);  \n            board.setViewingPerspective(Side.NORTH);  \n            break;  \n        case SOUTH:  \n            board.setViewingPerspective(Side.SOUTH);  \n            tilt(side);  \n            board.setViewingPerspective(Side.NORTH);  \n            break;  \n        case EAST:  \n            board.setViewingPerspective(Side.EAST);  \n            tilt(side);  \n            board.setViewingPerspective(Side.NORTH);  \n            break;  \n        default:  \n            break;  \n    }  \n}\n```\n\n## Task 10: Updating Score\n\n实现的分数更新。\n这个直接在`moveTileUpAsFarAsPossible`方法里插入一行就行了：\n\n```java\npublic void moveTileUpAsFarAsPossible(int x, int y) {  \n    Tile currTile = board.tile(x, y);  \n    int myValue = currTile.value();  \n    int targetY = y;  \n    int step = 0;  \n    for (int i = targetY + 1; i < board.size(); i++) { \n        if (board.tile(x, i) == null) {  \n            step += 1;  \n        } else {  \n            if (board.tile(x, i).value() == myValue && i != y) { \n                if (!board.tile(x, i).wasMerged()) {  \n                    this.score += board.tile(x, y).value() * 2;  // 插入这里\n                    step += 1; \n                }  \n            }  \n            break;  \n        }  \n    }  \n    if (step != 0) {  \n        board.move(x, targetY + step, currTile); \n}\n```","date":"2025-06-14T05:31:46.538Z","updated":"2025-06-14T05:31:46.538Z","path":"CS61B/proj0.html","title":"","comments":1,"layout":"page","_id":"cmbvt02gd00002kv3evcp4w9h","content":"<p>这次的<code>proj</code> 整体挺简单的，让我惊讶的是相比CS61A，它会提示要用到的辅助方法，不需要像之前非得看完整个框架才能开始做，而且还有风格检查和<code>git</code> ,<code>GitHub</code> 相关，刚好弥补了我不知道该怎么练习的苦恼。 </p>\n<hr>\n<p>这次的项目是一个叫<a href=\"https://play2048.co/\">2048</a> 的游戏。</p>\n<h2 id=\"Task-1-Empty-Space-Exists\"><a href=\"#Task-1-Empty-Space-Exists\" class=\"headerlink\" title=\"Task 1: Empty Space Exists\"></a>Task 1: Empty Space Exists</h2><p>如果棋盘上有空格就返回true，否则放回false 。<br>遍历就解决了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">emptySpaceExists</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; y &lt; board.size(); y++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board.tile(x, y) == <span class=\"literal\">null</span>) &#123; <span class=\"comment\">//空方块则返回null  </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-2-Max-Tile-Exists\"><a href=\"#Task-2-Max-Tile-Exists\" class=\"headerlink\" title=\"Task 2: Max Tile Exists\"></a>Task 2: Max Tile Exists</h2><p>如果棋盘上的任何瓦片值为获胜值（MAX_PIECE &#x3D; 2048），此方法应返回 true。<br>同样是遍历，但是要注意获取瓦片值前要确保瓦片存在：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">maxTileExists</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; y &lt; board.size(); y++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((board.tile(x, y) != <span class=\"literal\">null</span>) &amp;&amp; (board.tile(x, y).value() == MAX_PIECE)) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-3-At-Least-One-Move-Exists\"><a href=\"#Task-3-At-Least-One-Move-Exists\" class=\"headerlink\" title=\"Task 3: At Least One Move Exists\"></a>Task 3: At Least One Move Exists</h2><p>如果存在任何有效的移动，这个方法应该返回 true。<br>存在有效移动的两种方式：</p>\n<ol>\n<li>棋盘上至少有一个空格。</li>\n<li>棋盘上有两个相邻（它们之间可以有空格）且值相同的方块。<br>第一种很好判断，直接丢给刚刚完成的<code>emptySpaceExists()</code> 就行，第二个条件我写的很丑…QAQ<br>也是基于遍历，分成横向遍历和纵向遍历，它们接下来的步骤差不多：创建一个‘先行者’(<code>x1</code>,<code>y1</code>),<br>比较基础瓦片和先行者的值。<br>感觉这题有点像力扣的一道棋盘题，不过那个是判断达到最终结果的最少步数，用的多叉树解决的。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">atLeastOneMoveExists</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (emptySpaceExists()) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; y &lt; board.size() - <span class=\"number\">1</span>; y++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x1</span> <span class=\"operator\">=</span> x + <span class=\"number\">1</span>; x1 &lt; board.size(); x1++) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (board.tile(x, y) != <span class=\"literal\">null</span> &amp;&amp; board.tile(x1, y) != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (board.tile(x, y).value() == board.tile(x1, y).value()) &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">                    &#125;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y1</span> <span class=\"operator\">=</span> y + <span class=\"number\">1</span>; y1 &lt; board.size(); y1++) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (board.tile(x, y) != <span class=\"literal\">null</span> &amp;&amp; board.tile(x, y1) != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (board.tile(x, y).value() == board.tile(x, y1).value()) &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">                    &#125;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-5-Move-Tile-Up-No-Merging\"><a href=\"#Task-5-Move-Tile-Up-No-Merging\" class=\"headerlink\" title=\"## Task 5: Move Tile Up (No Merging)\"></a>## Task 5: Move Tile Up (No Merging)</h2><p>将位置 <code>(x, y)</code> 的方块尽可能向上移动到其所在列的最上方。<br>这里提示要用 <code>Board</code> 类的方法 <code>move(int x, int y, Tile tile)</code>，这个方法将给定的 <code>tile</code> 移动到棋盘上的 <code>(x, y)</code> 位置。而且要求<code>moveTileUpAsFarAsPossible</code> 解决方案应该恰好调用一次 <code>move</code> 方法。那就是先确定步数再用<code>move</code> 。<br>这里有一个小坑，如果你查看<code>Board</code> 类方法 <code>move</code> ，会发现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (tile1 == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tile.value() != tile1.value()) &#123;  </span><br><span class=\"line\">    ...  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    next = Tile.create(<span class=\"number\">2</span> * tile.value(), px, py);  </span><br><span class=\"line\">    tile1.setNext(next);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也就是如果传入<code>move</code> 的瓦片如果值存在，就一定会更新值，无论它是否移动过。于是就要注意不能把顶层瓦片传入<code>move</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">moveTileUpAsFarAsPossible</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">Tile</span> <span class=\"variable\">currTile</span> <span class=\"operator\">=</span> board.tile(x, y);  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">myValue</span> <span class=\"operator\">=</span> currTile.value();  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">targetY</span> <span class=\"operator\">=</span> y;  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">step</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> targetY + <span class=\"number\">1</span>; i &lt; board.size(); i++) &#123; <span class=\"comment\">//i = targetY + 1 从下一个方块开始比较  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board.tile(x, i) == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            step += <span class=\"number\">1</span>;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board.tile(x, i).value() == myValue &amp;&amp; i != y) &#123; <span class=\"comment\">//i != y 防止方块在顶层时加上自己的值  </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!board.tile(x, i).wasMerged()) &#123;  </span><br><span class=\"line\">                    step += <span class=\"number\">1</span>;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (step != <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">        board.move(x, targetY + step, currTile); <span class=\"comment\">// 顶层方块不移动但会检测合并，防止重复加上自己的值  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-6-Merging-Tiles\"><a href=\"#Task-6-Merging-Tiles\" class=\"headerlink\" title=\"Task 6: Merging Tiles\"></a>Task 6: Merging Tiles</h2><p>瓦片可以通过空格向上移动。当瓦片遇到非空格时，如果那个格子里有另一个相同值的瓦片，并且那个瓦片还没有因为这个倾斜操作被合并过，那么这两个瓦片应该合并。<br>我发现我在上面的题里已经解决这个问题了，于是跳过。</p>\n<h2 id=\"Task-7-Tilt-Column\"><a href=\"#Task-7-Tilt-Column\" class=\"headerlink\" title=\"Task 7: Tilt Column\"></a>Task 7: Tilt Column</h2><p>这个方法应该将给定坐标的列向上倾斜，将列中的所有方块移动到正确的位置，并合并需要合并的方块。<br>其实就是对<code>moveTileUpAsFarAsPossible</code>方法的抽象包装，把<code>moveTileUpAsFarAsPossible</code>方法用到给定<code>x</code>坐标的一列，注意要自上而下的调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tiltColumn</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> board.size() - <span class=\"number\">1</span>; y &gt;= <span class=\"number\">0</span>; y--) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board.tile(x, y) != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            moveTileUpAsFarAsPossible(x, y);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-8-Tilt-Up\"><a href=\"#Task-8-Tilt-Up\" class=\"headerlink\" title=\"Task 8: Tilt Up\"></a>Task 8: Tilt Up</h2><p>这个方法应该将整个棋盘向上倾斜，将所有列中的所有方块移动到它们应有的位置，并合并需要合并的方块。<br>其实就是对<code>tiltColumn</code>方法的抽象包装，在棋盘的每一列调用<code>tiltColumn</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tilt</span><span class=\"params\">(Side side)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        tiltColumn(x);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-9-Tilt-in-Four-Directions\"><a href=\"#Task-9-Tilt-in-Four-Directions\" class=\"headerlink\" title=\"Task 9: Tilt in Four Directions\"></a>Task 9: Tilt in Four Directions</h2><p>既然我们已经实现了向上方向的倾斜功能，现在我们必须对其他三个方向做同样的事情。<br>这里我的方法应该和官方期望的解法不同，我看官方的提示好像还要用到<code>dubug</code>，这里我看它给出</p>\n<ol>\n<li>“ <code>Side</code> 类是一种特殊的类，称为 <code>Enum</code> ”</li>\n<li>“枚举可以用类似 <code>Side s = Side.NORTH</code> 的语法赋值。请注意，我们不是使用 <code>new</code> 关键字，而是直接将 <code>Side</code> 值设置为四个值中的一个”</li>\n<li>“如果你对 Java 枚举感兴趣，请查看 <a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html\">https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html</a> 。”<br>这几个提示，结合起来就是：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tiltWrapper</span><span class=\"params\">(Side side)</span> &#123;  </span><br><span class=\"line\">    board.resetMerged();  </span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (side) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> NORTH:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> WEST:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.WEST);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> SOUTH:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.SOUTH);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> EAST:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.EAST);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">default</span>:  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Task-10-Updating-Score\"><a href=\"#Task-10-Updating-Score\" class=\"headerlink\" title=\"Task 10: Updating Score\"></a>Task 10: Updating Score</h2><p>实现的分数更新。<br>这个直接在<code>moveTileUpAsFarAsPossible</code>方法里插入一行就行了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">moveTileUpAsFarAsPossible</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">Tile</span> <span class=\"variable\">currTile</span> <span class=\"operator\">=</span> board.tile(x, y);  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">myValue</span> <span class=\"operator\">=</span> currTile.value();  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">targetY</span> <span class=\"operator\">=</span> y;  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">step</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> targetY + <span class=\"number\">1</span>; i &lt; board.size(); i++) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board.tile(x, i) == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            step += <span class=\"number\">1</span>;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board.tile(x, i).value() == myValue &amp;&amp; i != y) &#123; </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!board.tile(x, i).wasMerged()) &#123;  </span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.score += board.tile(x, y).value() * <span class=\"number\">2</span>;  <span class=\"comment\">// 插入这里</span></span><br><span class=\"line\">                    step += <span class=\"number\">1</span>; </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (step != <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">        board.move(x, targetY + step, currTile); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>这次的<code>proj</code> 整体挺简单的，让我惊讶的是相比CS61A，它会提示要用到的辅助方法，不需要像之前非得看完整个框架才能开始做，而且还有风格检查和<code>git</code> ,<code>GitHub</code> 相关，刚好弥补了我不知道该怎么练习的苦恼。 </p>\n<hr>\n<p>这次的项目是一个叫<a href=\"https://play2048.co/\">2048</a> 的游戏。</p>\n<h2 id=\"Task-1-Empty-Space-Exists\"><a href=\"#Task-1-Empty-Space-Exists\" class=\"headerlink\" title=\"Task 1: Empty Space Exists\"></a>Task 1: Empty Space Exists</h2><p>如果棋盘上有空格就返回true，否则放回false 。<br>遍历就解决了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">emptySpaceExists</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; y &lt; board.size(); y++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board.tile(x, y) == <span class=\"literal\">null</span>) &#123; <span class=\"comment\">//空方块则返回null  </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-2-Max-Tile-Exists\"><a href=\"#Task-2-Max-Tile-Exists\" class=\"headerlink\" title=\"Task 2: Max Tile Exists\"></a>Task 2: Max Tile Exists</h2><p>如果棋盘上的任何瓦片值为获胜值（MAX_PIECE &#x3D; 2048），此方法应返回 true。<br>同样是遍历，但是要注意获取瓦片值前要确保瓦片存在：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">maxTileExists</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; y &lt; board.size(); y++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((board.tile(x, y) != <span class=\"literal\">null</span>) &amp;&amp; (board.tile(x, y).value() == MAX_PIECE)) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-3-At-Least-One-Move-Exists\"><a href=\"#Task-3-At-Least-One-Move-Exists\" class=\"headerlink\" title=\"Task 3: At Least One Move Exists\"></a>Task 3: At Least One Move Exists</h2><p>如果存在任何有效的移动，这个方法应该返回 true。<br>存在有效移动的两种方式：</p>\n<ol>\n<li>棋盘上至少有一个空格。</li>\n<li>棋盘上有两个相邻（它们之间可以有空格）且值相同的方块。<br>第一种很好判断，直接丢给刚刚完成的<code>emptySpaceExists()</code> 就行，第二个条件我写的很丑…QAQ<br>也是基于遍历，分成横向遍历和纵向遍历，它们接下来的步骤差不多：创建一个‘先行者’(<code>x1</code>,<code>y1</code>),<br>比较基础瓦片和先行者的值。<br>感觉这题有点像力扣的一道棋盘题，不过那个是判断达到最终结果的最少步数，用的多叉树解决的。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">atLeastOneMoveExists</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (emptySpaceExists()) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; y &lt; board.size() - <span class=\"number\">1</span>; y++) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x1</span> <span class=\"operator\">=</span> x + <span class=\"number\">1</span>; x1 &lt; board.size(); x1++) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (board.tile(x, y) != <span class=\"literal\">null</span> &amp;&amp; board.tile(x1, y) != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (board.tile(x, y).value() == board.tile(x1, y).value()) &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">                    &#125;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y1</span> <span class=\"operator\">=</span> y + <span class=\"number\">1</span>; y1 &lt; board.size(); y1++) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (board.tile(x, y) != <span class=\"literal\">null</span> &amp;&amp; board.tile(x, y1) != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (board.tile(x, y).value() == board.tile(x, y1).value()) &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">                    &#125;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-5-Move-Tile-Up-No-Merging\"><a href=\"#Task-5-Move-Tile-Up-No-Merging\" class=\"headerlink\" title=\"## Task 5: Move Tile Up (No Merging)\"></a>## Task 5: Move Tile Up (No Merging)</h2><p>将位置 <code>(x, y)</code> 的方块尽可能向上移动到其所在列的最上方。<br>这里提示要用 <code>Board</code> 类的方法 <code>move(int x, int y, Tile tile)</code>，这个方法将给定的 <code>tile</code> 移动到棋盘上的 <code>(x, y)</code> 位置。而且要求<code>moveTileUpAsFarAsPossible</code> 解决方案应该恰好调用一次 <code>move</code> 方法。那就是先确定步数再用<code>move</code> 。<br>这里有一个小坑，如果你查看<code>Board</code> 类方法 <code>move</code> ，会发现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (tile1 == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tile.value() != tile1.value()) &#123;  </span><br><span class=\"line\">    ...  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    next = Tile.create(<span class=\"number\">2</span> * tile.value(), px, py);  </span><br><span class=\"line\">    tile1.setNext(next);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也就是如果传入<code>move</code> 的瓦片如果值存在，就一定会更新值，无论它是否移动过。于是就要注意不能把顶层瓦片传入<code>move</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">moveTileUpAsFarAsPossible</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">Tile</span> <span class=\"variable\">currTile</span> <span class=\"operator\">=</span> board.tile(x, y);  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">myValue</span> <span class=\"operator\">=</span> currTile.value();  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">targetY</span> <span class=\"operator\">=</span> y;  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">step</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> targetY + <span class=\"number\">1</span>; i &lt; board.size(); i++) &#123; <span class=\"comment\">//i = targetY + 1 从下一个方块开始比较  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board.tile(x, i) == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            step += <span class=\"number\">1</span>;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board.tile(x, i).value() == myValue &amp;&amp; i != y) &#123; <span class=\"comment\">//i != y 防止方块在顶层时加上自己的值  </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!board.tile(x, i).wasMerged()) &#123;  </span><br><span class=\"line\">                    step += <span class=\"number\">1</span>;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (step != <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">        board.move(x, targetY + step, currTile); <span class=\"comment\">// 顶层方块不移动但会检测合并，防止重复加上自己的值  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-6-Merging-Tiles\"><a href=\"#Task-6-Merging-Tiles\" class=\"headerlink\" title=\"Task 6: Merging Tiles\"></a>Task 6: Merging Tiles</h2><p>瓦片可以通过空格向上移动。当瓦片遇到非空格时，如果那个格子里有另一个相同值的瓦片，并且那个瓦片还没有因为这个倾斜操作被合并过，那么这两个瓦片应该合并。<br>我发现我在上面的题里已经解决这个问题了，于是跳过。</p>\n<h2 id=\"Task-7-Tilt-Column\"><a href=\"#Task-7-Tilt-Column\" class=\"headerlink\" title=\"Task 7: Tilt Column\"></a>Task 7: Tilt Column</h2><p>这个方法应该将给定坐标的列向上倾斜，将列中的所有方块移动到正确的位置，并合并需要合并的方块。<br>其实就是对<code>moveTileUpAsFarAsPossible</code>方法的抽象包装，把<code>moveTileUpAsFarAsPossible</code>方法用到给定<code>x</code>坐标的一列，注意要自上而下的调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tiltColumn</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> board.size() - <span class=\"number\">1</span>; y &gt;= <span class=\"number\">0</span>; y--) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board.tile(x, y) != <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            moveTileUpAsFarAsPossible(x, y);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-8-Tilt-Up\"><a href=\"#Task-8-Tilt-Up\" class=\"headerlink\" title=\"Task 8: Tilt Up\"></a>Task 8: Tilt Up</h2><p>这个方法应该将整个棋盘向上倾斜，将所有列中的所有方块移动到它们应有的位置，并合并需要合并的方块。<br>其实就是对<code>tiltColumn</code>方法的抽象包装，在棋盘的每一列调用<code>tiltColumn</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tilt</span><span class=\"params\">(Side side)</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; board.size(); x++) &#123;  </span><br><span class=\"line\">        tiltColumn(x);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Task-9-Tilt-in-Four-Directions\"><a href=\"#Task-9-Tilt-in-Four-Directions\" class=\"headerlink\" title=\"Task 9: Tilt in Four Directions\"></a>Task 9: Tilt in Four Directions</h2><p>既然我们已经实现了向上方向的倾斜功能，现在我们必须对其他三个方向做同样的事情。<br>这里我的方法应该和官方期望的解法不同，我看官方的提示好像还要用到<code>dubug</code>，这里我看它给出</p>\n<ol>\n<li>“ <code>Side</code> 类是一种特殊的类，称为 <code>Enum</code> ”</li>\n<li>“枚举可以用类似 <code>Side s = Side.NORTH</code> 的语法赋值。请注意，我们不是使用 <code>new</code> 关键字，而是直接将 <code>Side</code> 值设置为四个值中的一个”</li>\n<li>“如果你对 Java 枚举感兴趣，请查看 <a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html\">https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html</a> 。”<br>这几个提示，结合起来就是：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tiltWrapper</span><span class=\"params\">(Side side)</span> &#123;  </span><br><span class=\"line\">    board.resetMerged();  </span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (side) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> NORTH:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> WEST:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.WEST);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> SOUTH:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.SOUTH);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">case</span> EAST:  </span><br><span class=\"line\">            board.setViewingPerspective(Side.EAST);  </span><br><span class=\"line\">            tilt(side);  </span><br><span class=\"line\">            board.setViewingPerspective(Side.NORTH);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">default</span>:  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Task-10-Updating-Score\"><a href=\"#Task-10-Updating-Score\" class=\"headerlink\" title=\"Task 10: Updating Score\"></a>Task 10: Updating Score</h2><p>实现的分数更新。<br>这个直接在<code>moveTileUpAsFarAsPossible</code>方法里插入一行就行了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">moveTileUpAsFarAsPossible</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">Tile</span> <span class=\"variable\">currTile</span> <span class=\"operator\">=</span> board.tile(x, y);  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">myValue</span> <span class=\"operator\">=</span> currTile.value();  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">targetY</span> <span class=\"operator\">=</span> y;  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">step</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> targetY + <span class=\"number\">1</span>; i &lt; board.size(); i++) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board.tile(x, i) == <span class=\"literal\">null</span>) &#123;  </span><br><span class=\"line\">            step += <span class=\"number\">1</span>;  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board.tile(x, i).value() == myValue &amp;&amp; i != y) &#123; </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!board.tile(x, i).wasMerged()) &#123;  </span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.score += board.tile(x, y).value() * <span class=\"number\">2</span>;  <span class=\"comment\">// 插入这里</span></span><br><span class=\"line\">                    step += <span class=\"number\">1</span>; </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (step != <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">        board.move(x, targetY + step, currTile); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2025-06-14T05:17:22.475Z","updated":"2025-06-13T11:47:41.237Z","comments":1,"layout":"post","photos":[],"_id":"cmbvt02gg00012kv3hm7o1oyv","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}